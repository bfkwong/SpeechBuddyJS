{"version":3,"sources":["components/StatCard/StatCard.js","components/SingleTextAnalysis/SingleTextAnalysis.js","components/SingleText/SingleText.js","components/MultiText/MultiText.js","components/TwoTxtSent/TwoTxtSent.js","components/HomePage/HomePage.js","App.js","redux/reducer/textStoreReducer.js","redux/reducer/index.js","index.js"],"names":["StatCard","props","Card","className","Body","Title","value","Subtitle","description","SingleTextAnalysis","undefined","analysis","sentiment","Container","data","labels","topTenWords","map","v","datasets","label","length","options","scales","yAxes","ticks","beginAtZero","Table","striped","bordered","hover","toxicity","t","backgroundColor","results","probabilities","scale","max","min","stepSize","SingleText","useState","textArea","setTextArea","wordCount","setWordCount","sentenceCount","setSentenceCount","nounsPerc","setNounsPerc","adjPerc","setAdjPerc","textAnalysis","setTextAnalysis","runAnalysis","a","wordTok","natural","WordTokenizer","tokenizedWords","tokenize","wrdCnt","forEach","word","wordCountPair","Object","keys","key","sort","b","slice","analyzer","SentimentAnalyzer","PorterStemmer","toxModel","classify","predictions","alert","getSentiment","Row","Col","md","xs","Math","round","InputGroup","FormControl","as","aria-label","rows","placeholder","onChange","e","target","sentTok","SentenceTokenizer","lexicon","Lexicon","ruleSet","RuleSet","taggedWordsSep","BrillPOSTagger","tag","taggedWords","nouns","filter","w","adjs","Button","variant","onClick","StyledDiv","styled","div","MultiText","setAnalysis","fileContents","setFileContents","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onload","string","result","push","readAsText","useDropzone","getRootProps","getInputProps","filesUpload","path","use","model","embed","embeddings","values","arraySync","arr","Array","from","output","i","j","csd","similarity","jwd","an","to","pathname","multTextProps","txt1","txt2","TwoTxtSent","settxt1","settxt2","analysisStatus","setanalysisStatus","jwdAnalysis","setjwdAnalysis","showModal","setshowModal","closeModal","runSingleAnalysis","text","text1","text2","txt1Sent","txt2Sent","console","log","embeddings1","values1","arr1","embeddings2","values2","arr2","res","sent1","sent2","useEffect","location","Spinner","animation","role","sent","Text","Modal","show","onHide","Header","closeButton","Footer","HomePage","App","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","exact","component","initialState","combineReducers","textStore","state","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e66037b9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./StatCard.css\";\n\nfunction StatCard(props) {\n  return (\n    <Card className=\"card-padding\">\n      <Card.Body>\n        <Card.Title>{props.value}</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">\n          {props.description}\n        </Card.Subtitle>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default StatCard;\n","import React from \"react\";\nimport { Container, Table } from \"react-bootstrap\";\nimport { Radar, Bar } from \"react-chartjs-2\";\nimport \"./SingleTextAnalysis.css\";\n\nfunction SingleTextAnalysis(props) {\n  if (props.analysis.sentiment === undefined) {\n    return <div></div>;\n  }\n\n  return (\n    <Container className=\"SingleTextAnalysis\">\n      <h3 className=\"SingleTxtAnalysis__h3\">Text Analysis</h3>\n\n      <h5 className=\"SingleTxtAnalysis__h5\">Top Ten Words</h5>\n      <Bar\n        data={{\n          labels: props.analysis.topTenWords.map((v) => v[0]),\n          datasets: [\n            {\n              label: `Top ${props.analysis.topTenWords.length} Words`,\n              data: props.analysis.topTenWords.map((v) => v[1])\n            }\n          ]\n        }}\n        options={{\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true\n                }\n              }\n            ]\n          }\n        }}></Bar>\n\n      <h5 className=\"SingleTxtAnalysis__h5\">Sentiment Analysis</h5>\n      <Table striped bordered hover>\n        <tbody>\n          <tr>\n            <th>Sentiment</th>\n            <th>{props.analysis.sentiment}</th>\n          </tr>\n        </tbody>\n      </Table>\n\n      <h5 className=\"SingleTxtAnalysis__h5\">Toxicity Analysis</h5>\n      <Radar\n        data={{\n          labels: props.analysis.toxicity.map((t) => t.label),\n          datasets: [\n            {\n              label: \"Likelihood of Toxicity\",\n              backgroundColor: \"#212C31\",\n              data: props.analysis.toxicity.map(\n                (t) => t.results[0].probabilities[1]\n              )\n            }\n          ]\n        }}\n        options={{\n          scale: {\n            ticks: {\n              max: 1,\n              min: 0,\n              stepSize: 0.2\n            }\n          }\n        }}\n      />\n    </Container>\n  );\n}\n\nexport default SingleTextAnalysis;\n","import React, { useState } from \"react\";\nimport natural from \"natural\";\nimport * as toxicity from \"@tensorflow-models/toxicity\";\nimport {\n  Container,\n  Row,\n  Col,\n  InputGroup,\n  FormControl,\n  Button\n} from \"react-bootstrap\";\nimport \"./SingleText.css\";\n\nimport StatCard from \"../StatCard/StatCard\";\nimport SingleTextAnalysis from \"../SingleTextAnalysis/SingleTextAnalysis\";\n\nfunction SingleText() {\n  const [textArea, setTextArea] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [sentenceCount, setSentenceCount] = useState(1);\n  const [nounsPerc, setNounsPerc] = useState(0);\n  const [adjPerc, setAdjPerc] = useState(0);\n  const [textAnalysis, setTextAnalysis] = useState({});\n\n  const runAnalysis = async () => {\n    let wordTok = new natural.WordTokenizer();\n    let tokenizedWords = wordTok.tokenize(textArea);\n\n    let wrdCnt = {};\n    tokenizedWords.forEach((word) => {\n      if (wrdCnt[word] === undefined) {\n        wrdCnt[word] = 0;\n      }\n      wrdCnt[word] += 1;\n    });\n    let wordCountPair = Object.keys(wrdCnt).map((key) => [key, wrdCnt[key]]);\n    wordCountPair.sort(function (a, b) {\n      // Sort by the 2nd value in each array\n      if (a[1] === b[1]) return 0;\n      return a[1] < b[1] ? 1 : -1;\n    });\n    let topTenWords =\n      wordCountPair.length > 20 ? wordCountPair.slice(0, 20) : wordCountPair;\n\n    let analyzer = new natural.SentimentAnalyzer(\n      \"English\",\n      natural.PorterStemmer,\n      \"afinn\"\n    );\n\n    let toxModel = await toxicity.load();\n    if (toxModel) {\n      let predictions = await toxModel.classify([textArea]);\n      if (!predictions) {\n        alert(\"prediction failed\");\n        return;\n      }\n      setTextAnalysis({\n        sentiment: analyzer.getSentiment(tokenizedWords),\n        toxicity: predictions,\n        topTenWords: topTenWords\n      });\n    }\n  };\n\n  return (\n    <div className=\"TopLevelDisplay\">\n      <h1>Single Text Analysis</h1>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col md={3} xs={6}>\n            <StatCard value={wordCount} description=\"Words\"></StatCard>\n          </Col>\n          <Col md={3} xs={6}>\n            <StatCard value={sentenceCount} description=\"Sentences\"></StatCard>\n          </Col>\n          <Col md={3} xs={6}>\n            <StatCard\n              value={`${Math.round(nounsPerc * 100)}%`}\n              description=\"Are Nouns\"></StatCard>\n          </Col>\n          <Col md={3} xs={6}>\n            <StatCard\n              value={`${Math.round(adjPerc * 100)}%`}\n              description=\"Are Adjective\"></StatCard>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <InputGroup>\n            <FormControl\n              className=\"main-text-area\"\n              as=\"textarea\"\n              aria-label=\"With textarea\"\n              rows=\"15\"\n              placeholder=\"Enter your text document here ...\"\n              value={textArea}\n              onChange={(e) => {\n                setTextArea(e.target.value);\n                let wordTok = new natural.WordTokenizer();\n                let tokenizedWords = wordTok.tokenize(e.target.value);\n                setWordCount(tokenizedWords.length);\n\n                let sentTok = new natural.SentenceTokenizer();\n                setSentenceCount(sentTok.tokenize(e.target.value).length);\n\n                let lexicon = new natural.Lexicon(\"EN\", \"N\", \"NNP\");\n                let ruleSet = new natural.RuleSet(\"EN\");\n                let tagger = new natural.BrillPOSTagger(lexicon, ruleSet);\n                let taggedWordsSep = tagger.tag(tokenizedWords).taggedWords;\n\n                let nouns = taggedWordsSep.filter(\n                  (w) =>\n                    w.tag === \"NN\" ||\n                    w.tag === \"NNS\" ||\n                    w.tag === \"NNP\" ||\n                    w.tag === \"NNPS\"\n                );\n                let adjs = taggedWordsSep.filter(\n                  (w) => w.tag === \"JJ\" || w.tag === \"JJS\" || w.tag === \"JJR\"\n                );\n\n                setNounsPerc(nouns.length / taggedWordsSep.length || 0);\n                setAdjPerc(adjs.length / taggedWordsSep.length || 0);\n              }}\n            />\n          </InputGroup>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col xs={12} md={4}>\n            <Button\n              variant=\"primary\"\n              className=\"analyze-button\"\n              onClick={() => runAnalysis()}>\n              Analyze\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <SingleTextAnalysis analysis={textAnalysis}></SingleTextAnalysis>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default SingleText;\n","import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Container, Row, Col, Button, Table } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport * as use from \"@tensorflow-models/universal-sentence-encoder\";\nimport * as similarity from \"compute-cosine-similarity\";\nimport * as natural from \"natural\";\nimport \"./MultiText.css\";\nimport { Link } from \"react-router-dom\";\n\nconst StyledDiv = styled.div`\n  background-color: #d1f0f0;\n  color: #23686c;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 50px;\n`;\n\nfunction MultiText() {\n  const [analysis, setAnalysis] = useState([]);\n  const [fileContents, setFileContents] = useState([]);\n\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const string = reader.result;\n          fileContents.push(string);\n          setFileContents(fileContents);\n        };\n        reader.readAsText(file);\n      });\n    },\n    [fileContents]\n  );\n\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    onDrop\n  });\n\n  const filesUpload = acceptedFiles.map((file) => (\n    <li key={file.path}>{file.path}</li>\n  ));\n\n  const runAnalysis = async () => {\n    let model = await use.load();\n    let embeddings = await model.embed(fileContents);\n    let values = embeddings.arraySync();\n    let arr = Array.from(values);\n\n    let output = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        let csd = similarity(arr[i], arr[j]);\n        let jwd = natural.JaroWinklerDistance(fileContents[i], fileContents[j]);\n        output.push([\n          filesUpload[i],\n          filesUpload[j],\n          csd,\n          jwd,\n          fileContents[i],\n          fileContents[j]\n        ]);\n      }\n    }\n    setAnalysis(output);\n  };\n\n  return (\n    <div className=\"TopLevelDisplay\">\n      <h1>Multi Text Analysis</h1>\n      <div className=\"dropdown-container\">\n        <section className=\"container\">\n          <StyledDiv {...getRootProps({ className: \"dropzone\" })}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          </StyledDiv>\n          <aside className=\"MultiTxt__aside\">\n            <h4>Uploaded Files</h4>\n            <ul>{filesUpload}</ul>\n          </aside>\n        </section>\n      </div>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col xs={12} md={4}>\n            <Button onClick={() => runAnalysis()}>Analyze</Button>\n          </Col>\n        </Row>\n      </Container>\n      {analysis.length > 0 && (\n        <Container className=\"MultiTxt__analysisContainer\">\n          <Row className=\"justify-content-md-center\">\n            <Col>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Text</th>\n                    <th>Text</th>\n                    <th>Cosine Similarity</th>\n                    <th>Jaro Winkler Similarity</th>\n                    <th>Two Text Analysis</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {analysis.map((an, i) => (\n                    <tr key={i}>\n                      <td>{an[0]}</td>\n                      <td>{an[1]}</td>\n                      <td>{an[2]}</td>\n                      <td>{an[3]}</td>\n                      <td>\n                        <Link\n                          to={{\n                            pathname: \"/SpeechBuddyJS/two_txt_plag\",\n                            multTextProps: {\n                              txt1: an[4],\n                              txt2: an[5]\n                            }\n                          }}>\n                          Analyze\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      )}\n    </div>\n  );\n}\n\nexport default MultiText;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  InputGroup,\n  FormControl,\n  Button,\n  Card,\n  Spinner,\n  Modal\n} from \"react-bootstrap\";\nimport natural from \"natural\";\nimport * as use from \"@tensorflow-models/universal-sentence-encoder\";\nimport * as toxicity from \"@tensorflow-models/toxicity\";\nimport * as similarity from \"compute-cosine-similarity\";\nimport \"./TwoTxtSent\";\nimport SingleTextAnalysis from \"../SingleTextAnalysis/SingleTextAnalysis\";\n\nconst LOADING_MODEL = \"Loading Text Analysis Models ...\";\nconst ANALYZING_TXT1 = \"Embedding Text 1 ...\";\nconst ANALYZING_TXT2 = \"Embedding Text 2 ...\";\nconst FINALIZING = \"Finalizing Analysis ...\";\nconst DONE = \"DONE\";\n\nfunction TwoTxtSent(props) {\n  const [txt1, settxt1] = useState(\"\");\n  const [txt2, settxt2] = useState(\"\");\n  const [analysisStatus, setanalysisStatus] = useState(\"DONE\");\n  const [jwdAnalysis, setjwdAnalysis] = useState([]);\n  const [textAnalysis, setTextAnalysis] = useState({});\n  const [showModal, setshowModal] = useState(false);\n\n  const closeModal = () => {\n    setshowModal(false);\n  };\n\n  const runSingleAnalysis = async (text) => {\n    let wordTok = new natural.WordTokenizer();\n    let tokenizedWords = wordTok.tokenize(text);\n\n    let wrdCnt = {};\n    tokenizedWords.forEach((word) => {\n      if (wrdCnt[word] === undefined) {\n        wrdCnt[word] = 0;\n      }\n      wrdCnt[word] += 1;\n    });\n    let wordCountPair = Object.keys(wrdCnt).map((key) => [key, wrdCnt[key]]);\n    wordCountPair.sort(function (a, b) {\n      // Sort by the 2nd value in each array\n      if (a[1] === b[1]) return 0;\n      return a[1] < b[1] ? 1 : -1;\n    });\n    let topTenWords =\n      wordCountPair.length > 20 ? wordCountPair.slice(0, 20) : wordCountPair;\n\n    let analyzer = new natural.SentimentAnalyzer(\n      \"English\",\n      natural.PorterStemmer,\n      \"afinn\"\n    );\n\n    let toxModel = await toxicity.load();\n    if (toxModel) {\n      let predictions = await toxModel.classify([text]);\n      if (!predictions) {\n        alert(\"prediction failed\");\n        return;\n      }\n      setTextAnalysis({\n        sentiment: analyzer.getSentiment(tokenizedWords),\n        toxicity: predictions,\n        topTenWords: topTenWords\n      });\n      setshowModal(true);\n    }\n  };\n\n  const runAnalysis = useCallback(\n    async (text1, text2) => {\n      if (text1 === undefined) {\n        text1 = txt1;\n      }\n      if (text2 === undefined) {\n        text2 = txt2;\n      }\n\n      setanalysisStatus(LOADING_MODEL);\n      let model = await use.load();\n      let sentTok = new natural.SentenceTokenizer();\n      let txt1Sent = sentTok.tokenize(text1);\n      let txt2Sent = sentTok.tokenize(text2);\n\n      console.log(txt1Sent, txt2Sent);\n\n      setanalysisStatus(ANALYZING_TXT1);\n      let embeddings1 = await model.embed(txt1Sent);\n      let values1 = embeddings1.arraySync();\n      let arr1 = Array.from(values1);\n\n      setanalysisStatus(ANALYZING_TXT2);\n      let embeddings2 = await model.embed(txt2Sent);\n      let values2 = embeddings2.arraySync();\n      let arr2 = Array.from(values2);\n\n      setanalysisStatus(FINALIZING);\n      let res = [];\n      for (let sent1 = 0; sent1 < txt1Sent.length; sent1++) {\n        for (let sent2 = 0; sent2 < txt2Sent.length; sent2++) {\n          res.push({\n            sent1: txt1Sent[sent1],\n            sent2: txt2Sent[sent2],\n            jwd: similarity(arr1[sent1], arr2[sent2])\n          });\n        }\n      }\n\n      res.sort((a, b) => {\n        if (a.jwd === b.jwd) return 0;\n        return a.jwd < b.jwd ? 1 : -1;\n      });\n\n      setjwdAnalysis(res);\n      setanalysisStatus(DONE);\n    },\n    [txt1, txt2]\n  );\n\n  useEffect(() => {\n    if (props && props.location && props.location.multTextProps) {\n      settxt1(props.location.multTextProps.txt1);\n      settxt2(props.location.multTextProps.txt2);\n      runAnalysis(\n        props.location.multTextProps.txt1,\n        props.location.multTextProps.txt2\n      );\n    }\n  }, [props, runAnalysis]);\n\n  return (\n    <div className=\"TopLevelDisplay\">\n      <h1>Two Text Analysis</h1>\n      <Container>\n        <Row>\n          <Col>\n            <h3>Text 1</h3>\n            <InputGroup>\n              <FormControl\n                className=\"main-text-area\"\n                as=\"textarea\"\n                aria-label=\"With textarea\"\n                rows=\"15\"\n                placeholder=\"Enter your text document here ...\"\n                value={txt1}\n                onChange={(e) => settxt1(e.target.value)}\n              />\n            </InputGroup>\n            <Button\n              variant=\"primary\"\n              className=\"analyze-button\"\n              onClick={() => {\n                runSingleAnalysis(txt1);\n              }}>\n              Analyze Text 1\n            </Button>\n          </Col>\n          <Col>\n            <h3>Text 2</h3>\n            <InputGroup>\n              <FormControl\n                className=\"main-text-area\"\n                as=\"textarea\"\n                aria-label=\"With textarea\"\n                rows=\"15\"\n                placeholder=\"Enter your text document here ...\"\n                value={txt2}\n                onChange={(e) => settxt2(e.target.value)}\n              />\n            </InputGroup>\n            <Button\n              variant=\"primary\"\n              className=\"analyze-button\"\n              onClick={() => {\n                runSingleAnalysis(txt2);\n              }}>\n              Analyze Text 2\n            </Button>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col xs={12} md={4}>\n            <Button\n              variant=\"primary\"\n              className=\"analyze-button\"\n              onClick={() => runAnalysis()}>\n              Analyze For Plagiarism\n            </Button>\n          </Col>\n        </Row>\n        {analysisStatus !== \"DONE\" && (\n          <Row className=\"justify-content-md-center TwoTxtSent__row\">\n            <Col md={1}>\n              <Spinner animation=\"border\" role=\"status\"></Spinner>\n            </Col>\n            <Col md={\"auto\"}>\n              <h3>{analysisStatus}</h3>\n            </Col>\n          </Row>\n        )}\n        <Row>\n          <Col className=\"TwoTxtSent__col\">\n            {jwdAnalysis.map((sent, i) => (\n              <Card key={i} className=\"TwoTxtSent__cardWrapper\">\n                <Card.Body>\n                  <Card.Title>Cosine Distance: {sent.jwd}</Card.Title>\n                  <Card.Subtitle>Text 1</Card.Subtitle>\n                  <Card.Text className=\"TwoTxtSent__cardText\">\n                    {sent.sent1}\n                  </Card.Text>\n                  <Card.Subtitle>Text 2</Card.Subtitle>\n                  <Card.Text>{sent.sent2}</Card.Text>\n                </Card.Body>\n              </Card>\n            ))}\n          </Col>\n        </Row>\n      </Container>\n      <Modal show={showModal} onHide={closeModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Modal heading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <SingleTextAnalysis analysis={textAnalysis}></SingleTextAnalysis>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={closeModal}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default TwoTxtSent;\n","import React from \"react\";\n\nexport default function HomePage() {\n  return (\n    <div>\n      <h1>Welcome to SpeechBuddy</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport \"./App.css\";\nimport SingleText from \"./components/SingleText/SingleText\";\nimport MultiText from \"./components/MultiText/MultiText\";\nimport TwoTxtSent from \"./components/TwoTxtSent/TwoTxtSent\";\nimport { Route, Switch, BrowserRouter, Link } from \"react-router-dom\";\nimport HomePage from \"./components/HomePage/HomePage\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"/SpeechBuddyJS/home\">Speech Buddy</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <NavDropdown title=\"Text Analysis\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item as=\"span\">\n                  <Link to=\"/SpeechBuddyJS/single_text\">\n                    Single Text Analysis\n                  </Link>\n                </NavDropdown.Item>\n                <NavDropdown.Item as=\"span\">\n                  <Link to=\"/SpeechBuddyJS/two_txt_plag\">\n                    Two Text Analysis\n                  </Link>\n                </NavDropdown.Item>\n                <NavDropdown.Item as=\"span\">\n                  <Link to=\"/SpeechBuddyJS/multi_text\">\n                    Multi Text Analysis\n                  </Link>\n                </NavDropdown.Item>\n              </NavDropdown>\n              <NavDropdown title=\"Speech Analysis\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item>Speech Analysis</NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\">\n                  Stopword Analysis\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Switch>\n          <Route exact path=\"/SpeechBuddyJS\">\n            <HomePage></HomePage>\n          </Route>\n          <Route exact path=\"/SpeechBuddyJS/home\">\n            <HomePage></HomePage>\n          </Route>\n          <Route exact path=\"/SpeechBuddyJS/single_text\">\n            <SingleText></SingleText>\n          </Route>\n          <Route\n            exact\n            path=\"/SpeechBuddyJS/two_txt_plag\"\n            component={TwoTxtSent}></Route>\n          <Route exact path=\"/SpeechBuddyJS/multi_text\">\n            <MultiText></MultiText>\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const initialState = {\n  text: []\n};\n\nexport default function textStoreReducer(state = initialState, action) {\n  return state;\n}\n","import { combineReducers } from \"redux\";\n\nimport textStoreReducer from \"./textStoreReducer\";\n\nexport default combineReducers({ textStore: textStoreReducer });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./redux/reducer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// This is where the app loads from\n"],"sourceRoot":""}