{"version":3,"sources":["components/StatCard/StatCard.js","components/SingleTextAnalysis/SingleTextAnalysis.js","components/SingleText/SingleText.js","components/MultiText/MultiText.js","App.js","redux/reducer/textStoreReducer.js","redux/reducer/index.js","index.js"],"names":["StatCard","props","Card","className","Body","Title","value","Subtitle","description","SingleTextAnalysis","undefined","analysis","sentiment","Container","style","paddingBottom","textAlign","data","labels","topTenWords","map","v","datasets","label","length","options","scales","yAxes","ticks","beginAtZero","Table","striped","bordered","hover","toxicity","t","backgroundColor","results","probabilities","scale","max","min","stepSize","SingleText","useState","textArea","setTextArea","wordCount","setWordCount","sentenceCount","setSentenceCount","nounsPerc","setNounsPerc","adjPerc","setAdjPerc","textAnalysis","setTextAnalysis","runAnalysis","a","wordTok","natural","WordTokenizer","tokenizedWords","tokenize","forEach","word","wordCountPair","Object","keys","key","sort","b","slice","analyzer","SentimentAnalyzer","PorterStemmer","toxModel","classify","predictions","alert","getSentiment","Row","Col","md","xs","Math","round","InputGroup","FormControl","as","aria-label","rows","placeholder","onChange","e","target","sentTok","SentenceTokenizer","lexicon","Lexicon","ruleSet","RuleSet","taggedWordsSep","BrillPOSTagger","tag","taggedWords","nouns","filter","w","adjs","Button","variant","onClick","StyledDiv","styled","div","MultiText","setAnalysis","fileContents","setFileContents","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onload","string","result","push","readAsText","useDropzone","getRootProps","getInputProps","filesUpload","i","path","use","model","embed","embeddings","values","arraySync","arr","Array","from","output","j","csd","similarity","jwd","paddingTop","f","marginTop","App","display","setDisplay","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","initialState","text","combineReducers","textStore","state","action","type","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.041d2a21.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./StatCard.css\";\n\nfunction StatCard(props) {\n  return (\n    <Card className=\"card-padding\">\n      <Card.Body>\n        <Card.Title>{props.value}</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">\n          {props.description}\n        </Card.Subtitle>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default StatCard;\n","import React from \"react\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\nimport { Radar, Bar } from \"react-chartjs-2\";\nimport \"./SingleTextAnalysis.css\";\n\nfunction SingleTextAnalysis(props) {\n  if (props.analysis.sentiment === undefined) {\n    return <div></div>;\n  }\n\n  return (\n    <Container className=\"SingleTextAnalysis\">\n      <h3 style={{ paddingBottom: \"20px\" }}>Text Analysis</h3>\n\n      <h5 style={{ textAlign: \"left\" }}>Top Ten Words</h5>\n      <Bar\n        data={{\n          labels: props.analysis.topTenWords.map((v) => v[0]),\n          datasets: [\n            {\n              label: `Top ${props.analysis.topTenWords.length} Words`,\n              data: props.analysis.topTenWords.map((v) => v[1])\n            }\n          ]\n        }}\n        options={{\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true\n                }\n              }\n            ]\n          }\n        }}></Bar>\n\n      <h5 style={{ textAlign: \"left\" }}>Sentiment Analysis</h5>\n      <Table striped bordered hover>\n        <tbody>\n          <tr>\n            <th>Sentiment</th>\n            <th>{props.analysis.sentiment}</th>\n          </tr>\n        </tbody>\n      </Table>\n\n      <h5 style={{ textAlign: \"left\" }}>Toxicity Analysis</h5>\n      <Radar\n        data={{\n          labels: props.analysis.toxicity.map((t) => t.label),\n          datasets: [\n            {\n              label: \"Likelihood of Toxicity\",\n              backgroundColor: \"#212C31\",\n              data: props.analysis.toxicity.map(\n                (t) => t.results[0].probabilities[1]\n              )\n            }\n          ]\n        }}\n        options={{\n          scale: {\n            ticks: {\n              max: 1,\n              min: 0,\n              stepSize: 0.2\n            }\n          }\n        }}\n      />\n    </Container>\n  );\n}\n\nexport default SingleTextAnalysis;\n","import React, { useState } from \"react\";\nimport natural from \"natural\";\nimport * as toxicity from \"@tensorflow-models/toxicity\";\nimport {\n  Container,\n  Row,\n  Col,\n  InputGroup,\n  FormControl,\n  Button\n} from \"react-bootstrap\";\nimport \"./SingleText.css\";\n\nimport StatCard from \"../StatCard/StatCard\";\nimport SingleTextAnalysis from \"../SingleTextAnalysis/SingleTextAnalysis\";\n\nfunction SingleText() {\n  const [textArea, setTextArea] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [sentenceCount, setSentenceCount] = useState(1);\n  const [nounsPerc, setNounsPerc] = useState(0);\n  const [adjPerc, setAdjPerc] = useState(0);\n  const [textAnalysis, setTextAnalysis] = useState({});\n\n  const runAnalysis = async () => {\n    let wordTok = new natural.WordTokenizer();\n    let tokenizedWords = wordTok.tokenize(textArea);\n\n    let wordCount = {};\n    tokenizedWords.forEach((word) => {\n      if (wordCount[word] === undefined) {\n        wordCount[word] = 0;\n      }\n      wordCount[word] += 1;\n    });\n    let wordCountPair = Object.keys(wordCount).map((key) => [\n      key,\n      wordCount[key]\n    ]);\n    wordCountPair.sort(function (a, b) {\n      // Sort by the 2nd value in each array\n      if (a[1] === b[1]) return 0;\n      return a[1] < b[1] ? 1 : -1;\n    });\n    let topTenWords =\n      wordCountPair.length > 20 ? wordCountPair.slice(0, 20) : wordCountPair;\n\n    let analyzer = new natural.SentimentAnalyzer(\n      \"English\",\n      natural.PorterStemmer,\n      \"afinn\"\n    );\n\n    let toxModel = await toxicity.load();\n    if (toxModel) {\n      let predictions = await toxModel.classify([textArea]);\n      if (!predictions) {\n        alert(\"prediction failed\");\n        return;\n      }\n      setTextAnalysis({\n        sentiment: analyzer.getSentiment(tokenizedWords),\n        toxicity: predictions,\n        topTenWords: topTenWords\n      });\n    }\n  };\n\n  return (\n    <div className=\"TopLevelDisplay\">\n      <h1>Single Text Analysis</h1>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col md={3} xs={6}>\n            <StatCard value={wordCount} description=\"Words\"></StatCard>\n          </Col>\n          <Col md={3} xs={6}>\n            <StatCard value={sentenceCount} description=\"Sentences\"></StatCard>\n          </Col>\n          <Col md={3} xs={6}>\n            <StatCard\n              value={`${Math.round(nounsPerc * 100)}%`}\n              description=\"Are Nouns\"></StatCard>\n          </Col>\n          <Col md={3} xs={6}>\n            <StatCard\n              value={`${Math.round(adjPerc * 100)}%`}\n              description=\"Are Adjective\"></StatCard>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <InputGroup>\n            <FormControl\n              className=\"main-text-area\"\n              as=\"textarea\"\n              aria-label=\"With textarea\"\n              rows=\"15\"\n              placeholder=\"Enter your text document here ...\"\n              value={textArea}\n              onChange={(e) => {\n                setTextArea(e.target.value);\n                let wordTok = new natural.WordTokenizer();\n                let tokenizedWords = wordTok.tokenize(e.target.value);\n                setWordCount(tokenizedWords.length);\n\n                let sentTok = new natural.SentenceTokenizer();\n                setSentenceCount(sentTok.tokenize(e.target.value).length);\n\n                let lexicon = new natural.Lexicon(\"EN\", \"N\", \"NNP\");\n                let ruleSet = new natural.RuleSet(\"EN\");\n                let tagger = new natural.BrillPOSTagger(lexicon, ruleSet);\n                let taggedWordsSep = tagger.tag(tokenizedWords).taggedWords;\n\n                let nouns = taggedWordsSep.filter(\n                  (w) =>\n                    w.tag === \"NN\" ||\n                    w.tag === \"NNS\" ||\n                    w.tag === \"NNP\" ||\n                    w.tag === \"NNPS\"\n                );\n                let adjs = taggedWordsSep.filter(\n                  (w) => w.tag === \"JJ\" || w.tag === \"JJS\" || w.tag === \"JJR\"\n                );\n\n                setNounsPerc(nouns.length / taggedWordsSep.length || 0);\n                setAdjPerc(adjs.length / taggedWordsSep.length || 0);\n              }}\n            />\n          </InputGroup>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col xs={12} md={4}>\n            <Button\n              variant=\"primary\"\n              className=\"analyze-button\"\n              onClick={() => runAnalysis()}>\n              Analyze\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <SingleTextAnalysis analysis={textAnalysis}></SingleTextAnalysis>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default SingleText;\n","import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Container, Row, Col, Button, Table } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport * as use from \"@tensorflow-models/universal-sentence-encoder\";\nimport * as similarity from \"compute-cosine-similarity\";\nimport * as natural from \"natural\";\nimport \"./MultiText.css\";\n\nconst StyledDiv = styled.div`\n  background-color: #d1f0f0;\n  color: #23686c;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 50px;\n`;\n\nfunction MultiText() {\n  const [analysis, setAnalysis] = useState([]);\n  const [fileContents, setFileContents] = useState([]);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const string = reader.result;\n        fileContents.push(string);\n        setFileContents(fileContents);\n      };\n      reader.readAsText(file);\n    });\n  }, []);\n\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\n    onDrop\n  });\n\n  const filesUpload = acceptedFiles.map((file, i) => file.path);\n\n  const runAnalysis = async () => {\n    let model = await use.load();\n    let embeddings = await model.embed(fileContents);\n    let values = embeddings.arraySync();\n    let arr = Array.from(values);\n\n    let output = [];\n    for (let i = 0; i < arr.length - 1; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        let csd = similarity(arr[i], arr[j]);\n        let jwd = natural.JaroWinklerDistance(fileContents[i], fileContents[j]);\n        output.push([filesUpload[i], filesUpload[j], csd, jwd]);\n      }\n    }\n    setAnalysis(output);\n  };\n\n  return (\n    <div className=\"TopLevelDisplay\">\n      <h1>Multi Text Analysis</h1>\n      <div className=\"dropdown-container\">\n        <section className=\"container\">\n          <StyledDiv {...getRootProps({ className: \"dropzone\" })}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          </StyledDiv>\n          <aside style={{ paddingTop: \"20px\", textAlign: \"left\" }}>\n            <h4>Uploaded Files</h4>\n            <Container>\n              <Row>\n                {filesUpload.map((f, i) => (\n                  <Col md={2} key={i}>\n                    <p>{f}</p>\n                  </Col>\n                ))}\n              </Row>\n            </Container>\n          </aside>\n        </section>\n      </div>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col xs={12} md={4}>\n            <Button onClick={() => runAnalysis()}>Analyze</Button>\n          </Col>\n        </Row>\n      </Container>\n      {analysis.length > 0 && (\n        <Container style={{ marginTop: \"20px\" }}>\n          <Row className=\"justify-content-md-center\">\n            <Col>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Text</th>\n                    <th>Text</th>\n                    <th>Cosine Similarity</th>\n                    <th>Jaro Winkler Similarity</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {analysis.map((a, i) => (\n                    <tr key={i}>\n                      <td>{a[0]}</td>\n                      <td>{a[1]}</td>\n                      <td>{a[2]}</td>\n                      <td>{a[3]}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </Container>\n      )}\n    </div>\n  );\n}\n\nexport default MultiText;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Navbar,\n  Nav,\n  NavDropdown,\n  Form,\n  FormControl,\n  Button\n} from \"react-bootstrap\";\nimport \"./App.css\";\nimport SingleText from \"./components/SingleText/SingleText\";\nimport MultiText from \"./components/MultiText/MultiText\";\n\nconst SINGLE_TEXT = \"SINGLE_TEXT\";\nconst MULTI_TEXT = \"MULTI_TEXT\";\nconst PLAGIARISM_TEXT = \"PLAGIARISM_TEXT\";\nconst SPEECH_ANALYSIS = \"SPEECH_ANALYSIS\";\n\nfunction App() {\n  const [display, setDisplay] = useState(\"SINGLE_TEXT\");\n\n  return (\n    <div>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Speech Buddy</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Text Analysis\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => setDisplay(SINGLE_TEXT)}>\n                Single Text Analysis\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => setDisplay(MULTI_TEXT)}>\n                Multi Text Analysis\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={() => setDisplay(PLAGIARISM_TEXT)}>\n                Plagiarism Analysis\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Speech Analysis\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => setDisplay(SPEECH_ANALYSIS)}>\n                Speech Analysis\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">\n                Stopword Analysis\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      {display === SINGLE_TEXT && <SingleText></SingleText>}\n      {display === MULTI_TEXT && <MultiText></MultiText>}\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n  text: []\n};\n\nexport default function textStoreReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport textStoreReducer from \"./textStoreReducer\";\n\nexport default combineReducers({ textStore: textStoreReducer });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./redux/reducer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}